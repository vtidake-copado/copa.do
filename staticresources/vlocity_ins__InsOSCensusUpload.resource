{
    "dataPackId": "",
    "dataPacks": [
        {
            "VlocityDataPackAllRelationships": null,
            "VlocityDataPackData": {
                "%vlocity_namespace%__VlocityUITemplate__c": [
                    {
                        "%vlocity_namespace%__Active__c": true,
                        "%vlocity_namespace%__Author__c": "Vlocity",
                        "%vlocity_namespace%__CSS__c": ".vloc-ins-file-upload-container {\n  position: relative;\n  width: 100%; }\n  .vloc-ins-file-upload-container .vloc-ins-file-upload-notify_container {\n    min-height: 2.5rem;\n    position: absolute;\n    visibility: hidden;\n    opacity: 0;\n    transition: visibility 0ms linear 150ms, position 0ms linear 150ms, opacity 150ms ease-in; }\n    .vloc-ins-file-upload-container .vloc-ins-file-upload-notify_container.active {\n      opacity: 1;\n      position: static;\n      visibility: visible;\n      transition: visibility 0ms linear 0ms, position 0ms linear 0ms, opacity 150ms ease-in; }\n",
                        "%vlocity_namespace%__CustomJavascript__c": "var self = this;\n\n// Notification object\nbaseCtrl.prototype.notification = {\n    active: false,\n    type: 'Notify',\n    message: ''\n};\n\nbaseCtrl.prototype.closeNotification = function() {\n    baseCtrl.prototype.notification.active = false;\n};\n\n// Need the control object in JS, grabbing it on template init\nbaseCtrl.prototype.init = function(control) {\n    baseCtrl.prototype.control = control;\n};\n\n// Directive on the file input element to handle upload after file is selected\nvlocity.cardframework.registerModule.directive('vlocInsFileUpload', function($q) {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function(scope, element, attrs, ngModel) {\n            if (!ngModel) return;\n            ngModel.$render = function() {};\n            element.bind('change', function(e) {\n                if (typeof Papa === 'undefined') {\n                    baseCtrl.prototype.notification.active = true;\n                    baseCtrl.prototype.notification.type = 'Error';\n                    baseCtrl.prototype.notification.message = 'The Papa Parse javascript library cannot be found.';\n                    element.val(null);\n                    scope.$digest();\n                    return;\n                }\n                element.parse({\n                    config: {},\n                    before: function(file, inputElem) {\n                        var sFileName = inputElem.value;\n                        baseCtrl.prototype.$scope.bpTree.response.tableData.rows = [];\n                        baseCtrl.prototype.notification = {\n                            active: false,\n                            type: 'Notify',\n                            message: ''\n                        };\n                        if (file.name.substr(file.name.length - 3, file.name.length).toLowerCase() !== 'csv') {\n                            baseCtrl.prototype.notification.active = true;\n                            baseCtrl.prototype.notification.type = 'Error';\n                            baseCtrl.prototype.notification.message = 'Sorry, ' + file.name + ' is invalid, only a csv file can be uploaded. Please choose the correct csv file.';\n                        } else {\n                            // Parse CSV\n                            Papa.parse(file, {\n                                header: true,\n                                dynamicTyping: true,\n                                skipEmptyLines: true,\n                                complete: function(result) {\n                                    if (result.errors.length) {\n                                        baseCtrl.prototype.notification.active = true;\n                                        baseCtrl.prototype.notification.type = 'Error';\n                                        baseCtrl.prototype.notification.message = 'There has been an upload error.';\n                                    } else {\n                                        processUploadedData(result.data).then(function(data) {\n                                            // Successfully processed CSV\n                                            baseCtrl.prototype.$scope.bpTree.response.inputMap = {};\n                                            baseCtrl.prototype.$scope.bpTree.response.inputMap.tableData = baseCtrl.prototype.$scope.bpTree.response.tableData;\n                                            baseCtrl.prototype.$scope.bpTree.response.contextId = baseCtrl.prototype.$scope.bpTree.response.ContextId;\n                                            // Virtual button click of configured Remote Action within the OmniScript Step:\n                                            // Passing in 'typeAheadSearch' as the operation so the callback gets hit.\n                                            baseCtrl.prototype.$scope.buttonClick(baseCtrl.prototype.$scope.bpTree.response, baseCtrl.prototype.control, baseCtrl.prototype.$scope, undefined, 'typeAheadSearch', undefined, function(success) {\n                                                if (success) {\n                                                    // Callback is called after the data has been uploaded to the object (using contextId)\n                                                    baseCtrl.prototype.notification.active = true;\n                                                    baseCtrl.prototype.notification.type = 'Success';\n                                                    baseCtrl.prototype.notification.message = 'Successfully uploaded and processed ' + result.data.length + ' records from ' + file.name;\n                                                } else {\n                                                    baseCtrl.prototype.notification.active = true;\n                                                    baseCtrl.prototype.notification.type = 'Error';\n                                                    baseCtrl.prototype.notification.message = 'There has been an error saving the Census Data.';\n                                                }\n                                            });\n                                        }, function(error) {\n                                            baseCtrl.prototype.notification.active = true;\n                                            baseCtrl.prototype.notification.type = 'Error';\n                                            baseCtrl.prototype.notification.message = 'There has been an error: ' + error;\n                                        }, function(warning) {\n                                            baseCtrl.prototype.notification.active = true;\n                                            baseCtrl.prototype.notification.type = 'Notify';\n                                            baseCtrl.prototype.notification.message = warning;\n                                        });\n                                    }\n                                }\n                            });\n                        }\n                    },\n                    error: function(error, file, inputElem, reason) {\n                        baseCtrl.prototype.notification.active = true;\n                        baseCtrl.prototype.notification.type = 'Error';\n                        baseCtrl.prototype.notification.message = error + ': ' + reason;\n                    },\n                    complete: function() {\n                        // Clearing the file out of the input so it can be used again:\n                        element.val(null);\n                    }\n                });\n            });\n\n            function processUploadedData(data) {\n                var deferred = $q.defer();\n                var tableData = baseCtrl.prototype.$scope.bpTree.response.tableData;\n                angular.forEach(tableData.rows, function(row) {\n                    row.deleted = false;\n                    angular.forEach(tableData.headers, function(header) {\n                        self.validateData(header, row);\n                    });\n                });\n                angular.forEach(data, function(item) {\n                    self.addRowUpload(item);\n                });\n                if (!tableData.rows.length) {\n                    deferred.notify('No rows were processed from this CSV File.');\n                } else {\n                    if (!tableData || !tableData.rows) {\n                        deferred.reject('No rows array available.');\n                    } else {\n                        deferred.resolve(tableData);\n                    }\n                }\n                return deferred.promise;\n            }\n        }\n    };\n});\n\nthis.addRow = function(row) {\n    var tableData = baseCtrl.prototype.$scope.bpTree.response.tableData;\n    if (row.deleted === null) {\n        row.deleted = false;\n    }\n\n    if (row.rowKey === null) {\n        row.rowKey = Math.floor(Math.random() * 16777215).toString(16); // Random hexidecimal string    \n    }\n\n    // Add Hidden Values to every row as it is added, if it has a default.\n    // Hidden values are assumed to be the same across all rows\n    angular.forEach(tableData.headers, function(header) {\n        if (row[header.name] === null && header.defaultValue !== null) {\n            row[header.name] = header.defaultValue;\n        }\n    });\n    baseCtrl.prototype.$scope.bpTree.response.tableData.rows.push(row);\n};\n\nthis.addRowUpload = function(row) {\n    var tableData = baseCtrl.prototype.$scope.bpTree.response.tableData;\n    angular.forEach(tableData.headers, function(header) {\n        angular.forEach(row, function(value, key) {\n            if (header.label.toLowerCase() == key.toLowerCase()) {\n                row[header.name] = value;\n                delete row[key];\n            }\n        });\n    });\n    self.addRow(row);\n};\n\nthis.parseDate = function(date) {\n    if (date === null || date === '') {\n        return '';\n    }\n    return moment.utc(date).format('YYYY-MM-DD');\n};\n\nthis.validateData = function(header, row) {\n    if (header.type === 'DATE') {\n        row[header.name] = self.parseDate(row[header.name]);\n    }\n};",
                        "%vlocity_namespace%__Definition__c": "",
                        "%vlocity_namespace%__Description__c": "",
                        "%vlocity_namespace%__DisplayOn__c": "",
                        "%vlocity_namespace%__ExternalID__c": "ins-os-census-upload/1/Vlocity/1503349463132",
                        "%vlocity_namespace%__HTML__c": "<div class=\"vloc-ins-file-upload-container\" ng-init=\"baseCtrl.init(control)\">\n    <div class=\"slds-notify_container vloc-ins-file-upload-notify_container\" ng-class=\"{'active': baseCtrl.notification.active}\">\n        <div class=\"slds-notify slds-notify--alert slds-theme--alert-texture\" role=\"alert\" ng-class=\"{'slds-theme--success': baseCtrl.notification.type === 'Success', 'slds-theme--error': baseCtrl.notification.type === 'Error'}\">\n            <button class=\"slds-button slds-notify__close slds-button--icon-inverse\" title=\"Close\" ng-click=\"baseCtrl.closeNotification()\">\n                <slds-button-svg-icon size=\"'small'\" sprite=\"'utility'\" icon=\"'close'\" extra-classes=\"'slds-notify__close slds-button--icon-inverse'\"></slds-button-svg-icon>\n                <span class=\"slds-assistive-text\">Close</span>\n            </button>\n            <span class=\"slds-assistive-text\">{{baseCtrl.notification.message}}</span>\n            <h2>{{baseCtrl.notification.message}}</h2>\n        </div>\n    </div>\n    <div class=\"slds-form-element\">\n        <span class=\"slds-form-element__label\" id=\"vloc-upload-census\">Select the CSV File to Upload:</span>\n        <div class=\"slds-form-element__control\">\n            <div class=\"slds-file-selector slds-file-selector--files\">\n                <input type=\"file\" class=\"slds-file-selector__input slds-assistive-text\" accept=\".csv\" id=\"vloc-upload-census-input\" aria-describedby=\"vloc-upload-census\" ng-model=\"baseCtrl.selectedFile\" vloc-ins-file-upload />\n                <label class=\"slds-file-selector__body\" for=\"vloc-upload-census-input\">\n                    <span class=\"slds-file-selector__button slds-button slds-button--neutral\">\n                        <slds-button-svg-icon size=\"'small'\" sprite=\"'utility'\" icon=\"'upload'\" extra-classes=\"'slds-button__icon--left'\"></slds-button-svg-icon>\n                        Upload CSV File\n                    </span>\n                </label>\n            </div>\n        </div>\n    </div>\n</div>",
                        "%vlocity_namespace%__ParentID__c": "",
                        "%vlocity_namespace%__SampleJson__c": "{\n    \"AddToCart\": \"Add to Cart\",\n    \"OmniMonthly\": \"Monthly Cost\",\n    \"OmniOneTime\": \"One Time Cost\",\n    \"control\": {\n        \"itemsKey\": \"results\",\n        \"propSetMap\": {\n            \"label\": \"Property Label\"\n        },\n        \"vlcSI\": {\n            \"results\": [\n                {\n                    \"Description\": \"Product Description\",\n                    \"MonthlyCost\": 20,\n                    \"Name\": \"Product Name\",\n                    \"OneTimeCost\": 100,\n                    \"added\": false\n                }\n            ]\n        }\n    }\n}",
                        "%vlocity_namespace%__Sass__c": ".vloc-ins-file-upload-container {\n    position: relative;\n    width: 100%;\n\n    .vloc-ins-file-upload-notify_container {\n        min-height: 2.5rem;\n        position: absolute;\n        visibility: hidden;\n        opacity: 0;\n        transition: visibility 0ms linear 150ms,\n                    position 0ms linear 150ms,\n                    opacity 150ms ease-in;\n\n        &.active {\n            opacity: 1;\n            position: static;\n            visibility: visible;\n            transition: visibility 0ms linear 0ms,\n                        position 0ms linear 0ms,\n                        opacity 150ms ease-in;\n        }\n    }\n}",
                        "%vlocity_namespace%__Type__c": "OmniScript Selectable Items",
                        "%vlocity_namespace%__Version__c": 1,
                        "Name": "ins-os-census-upload",
                        "VlocityDataPackIsIncluded": true,
                        "VlocityDataPackType": "SObject",
                        "VlocityRecordSObjectType": "%vlocity_namespace%__VlocityUITemplate__c",
                        "VlocityRecordSourceKey": "VlocityUITemplate/ins-os-census-upload/%vlocity_namespace%__VlocityUITemplate__c/ins-os-census-upload"
                    }
                ],
                "VlocityDataPackIsIncluded": true,
                "VlocityDataPackKey": "VlocityUITemplate/ins-os-census-upload",
                "VlocityDataPackType": "VlocityUITemplate"
            },
            "VlocityDataPackIsIncluded": true,
            "VlocityDataPackKey": "VlocityUITemplate/ins-os-census-upload",
            "VlocityDataPackName": "ins-os-census-upload",
            "VlocityDataPackStatus": "Success",
            "VlocityDataPackType": "VlocityUITemplate"
        }
    ],
    "name": "InsOSCensusUpload",
    "primaryDataPackKey": "VlocityDeploy",
    "processMultiple": true,
    "status": "Complete",
    "version": 1
}