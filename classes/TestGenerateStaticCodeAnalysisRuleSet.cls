@IsTest
public with sharing class TestGenerateStaticCodeAnalysisRuleSet {

	static testMethod void testGenerate() {

		Static_Code_Analysis_Settings__c scas = new Static_Code_Analysis_Settings__c(Name='Test PMD');
		Utilities.Secure_DML(scas, Utilities.DML_Action.INS, schema.SObjectType.Static_Code_Analysis_Settings__c);

		testMethodUtilities.upsertOrgwideSettings();

		Test.startTest();
		GenerateStaticCodeAnalysisRuleSet gscars = new GenerateStaticCodeAnalysisRuleSet(new ApexPages.StandardController(scas));
        String res = '[{ "name": "ExcessiveClassLength", "ref": "category/apex/design.xml/ExcessiveClassLength", "priority": "2", "message": "Avoid really long classes (lines of code)" }, { "name": "ExcessiveParameterList", "ref": "category/apex/design.xml/ExcessiveParameterList", "priority": "3", "message": "Avoid long parameter lists" }, { "name": "ExcessivePublicCount", "ref": "category/apex/design.xml/ExcessivePublicCount", "priority": "4", "message": "This class has too many public methods and attributes" }, { "name": "NcssConstructorCount", "ref": "category/apex/design.xml/NcssConstructorCount", "priority": "3", "message": "The constructor has an NCSS line count of {0}," }, { "name": "NcssMethodCount", "ref": "category/apex/design.xml/NcssMethodCount", "priority": "3", "message": "The method {0},() has an NCSS line count of {1}," }, { "name": "NcssTypeCount", "ref": "category/apex/design.xml/NcssTypeCount", "priority": "3", "message": "The type has an NCSS line count of {0}," }, { "name": "StdCyclomaticComplexity", "ref": "category/apex/design.xml/StdCyclomaticComplexity", "priority": "3", "message": "The has a Standard Cyclomatic Complexity of {2},." }, { "name": "TooManyFields", "ref": "category/apex/design.xml/TooManyFields", "priority": "3", "message": "Too many fields" }, { "name": "AvoidDeeplyNestedIfStmts", "ref": "category/apex/design.xml/AvoidDeeplyNestedIfStmts", "priority": "2", "message": "Deeply nested if..else statements are hard to read" }, { "name": "CyclomaticComplexity", "ref": "category/apex/design.xml/CyclomaticComplexity", "priority": "3", "message": "Class or method has a high Standard Cyclomatic Complexity." }, { "name": "AvoidSoqlInLoops", "ref": "category/apex/performance.xml/AvoidSoqlInLoops", "priority": "2", "message": "Avoid Soql queries inside loops" }, { "name": "AvoidDmlStatementsInLoops", "ref": "category/apex/performance.xml/AvoidDmlStatementsInLoops", "priority": "1", "message": "Avoid DML Statements inside loops" }, { "name": "AvoidDirectAccessTriggerMap", "ref": "category/apex/errorprone.xml/AvoidDirectAccessTriggerMap", "priority": "3", "message": "Avoid directly accessing Trigger.old and Trigger.new" }, { "name": "AvoidLogicInTrigger", "ref": "category/apex/bestpractices.xml/AvoidLogicInTrigger", "priority": "1", "message": "Avoid logic in triggers" }, { "name": "AvoidGlobalModifier", "ref": "category/apex/bestpractices.xml/AvoidGlobalModifier", "priority": "2", "message": "Avoid using global modifier" }, { "name": "AvoidNonExistentAnnotations", "ref": "category/apex/errorprone.xml/AvoidNonExistentAnnotations", "priority": "1", "message": "" }, { "name": "AvoidHardcodingId", "ref": "category/apex/errorprone.xml/AvoidHardcodingId", "priority": "1", "message": "Avoid hardcoding ID\'s" }, { "name": "ClassNamingConventions", "ref": "category/apex/codestyle.xml/ClassNamingConventions", "priority": "2", "message": "Class names should begin with an uppercase character" }, { "name": "MethodNamingConventions", "ref": "category/apex/codestyle.xml/MethodNamingConventions", "priority": "2", "message": "Method name does not begin with a lower case character." }, { "name": "MethodWithSameNameAsEnclosingClass", "ref": "category/apex/errorprone.xml/MethodWithSameNameAsEnclosingClass", "priority": "1", "message": "Classes should not have non-constructor methods with the same name as the class" }, { "name": "FieldNamingConventions", "ref": "category/apex/codestyle.xml/FieldNamingConventions", "priority": "3", "message": "" }, { "name": "FormalParameterNamingConventions", "ref": "category/apex/codestyle.xml/FormalParameterNamingConventions", "priority": "3", "message": "" }, { "name": "LocalVariableNamingConventions", "ref": "category/apex/codestyle.xml/LocalVariableNamingConventions", "priority": "2", "message": "" }, { "name": "PropertyNamingConventions", "ref": "category/apex/codestyle.xml/PropertyNamingConventions", "priority": "3", "message": "" }, { "name": "ApexUnitTestClassShouldHaveAsserts", "ref": "category/apex/bestpractices.xml/ApexUnitTestClassShouldHaveAsserts", "priority": "1", "message": "Apex unit test classes should have at least one System.assert() or assertEquals() or AssertNotEquals() call" }, { "name": "ApexUnitTestShouldNotUseSeeAllDataTrue", "ref": "category/apex/bestpractices.xml/ApexUnitTestShouldNotUseSeeAllDataTrue", "priority": "1", "message": "@isTest(seeAllData=true) should not be used in Apex unit tests because it opens up the existing database data for unexpected modification by tests" }, { "name": "ApexSharingViolations", "ref": "category/apex/security.xml/ApexSharingViolations", "priority": "1", "message": "Apex classes should declare a sharing model if DML or SOQL is used" }, { "name": "ApexInsecureEndpoint", "ref": "category/apex/security.xml/ApexInsecureEndpoint", "priority": "1", "message": "Apex callouts should use encrypted communication channels" }, { "name": "ApexCSRF", "ref": "category/apex/security.xml/ApexCSRF", "priority": "2", "message": "Avoid making DML operations in Apex class constructor/init method" }, { "name": "ApexOpenRedirect", "ref": "category/apex/security.xml/ApexOpenRedirect", "priority": "2", "message": "Apex classes should safely redirect to a known location" }, { "name": "ApexSOQLInjection", "ref": "category/apex/security.xml/ApexSOQLInjection", "priority": "2", "message": "Apex classes should escape variables merged in DML query" }, { "name": "ApexXSSFromURLParam", "ref": "category/apex/security.xml/ApexXSSFromURLParam", "priority": "2", "message": "Apex classes should escape Strings obtained from URL parameters" }, { "name": "ApexXSSFromEscapeFalse", "ref": "category/apex/security.xml/ApexXSSFromEscapeFalse", "priority": "2", "message": "Apex classes should escape addError strings" }, { "name": "ApexBadCrypto", "ref": "category/apex/security.xml/ApexBadCrypto", "priority": "1", "message": "Apex Crypto should use random IV/key" }, { "name": "ApexCRUDViolation", "ref": "category/apex/security.xml/ApexCRUDViolation", "priority": "1", "message": "Validate CRUD permission before SOQL/DML operation" }, { "name": "ApexDangerousMethods", "ref": "category/apex/security.xml/ApexDangerousMethods", "priority": "1", "message": "Calling potentially dangerous method" }, { "name": "ApexSuggestUsingNamedCred", "ref": "category/apex/security.xml/ApexSuggestUsingNamedCred", "priority": "2", "message": "Consider using named credentials for authenticated callouts" }, { "name": "IfStmtsMustUseBraces", "ref": "category/apex/codestyle.xml/IfStmtsMustUseBraces", "priority": "4", "message": "Avoid using if statements without curly braces" }, { "name": "WhileLoopsMustUseBraces", "ref": "category/apex/codestyle.xml/WhileLoopsMustUseBraces", "priority": "4", "message": "Avoid using statements without curly braces" }, { "name": "IfElseStmtsMustUseBraces", "ref": "category/apex/codestyle.xml/IfElseStmtsMustUseBraces", "priority": "4", "message": "Avoid using  statements without curly braces" }, { "name": "ForLoopsMustUseBraces", "ref": "category/apex/codestyle.xml/ForLoopsMustUseBraces", "priority": "4", "message": "Avoid using statements without curly braces" }, { "name": "EmptyCatchBlock", "ref": "category/apex/errorprone.xml/EmptyCatchBlock", "priority": "3", "message": "Avoid empty catch blocks" }, { "name": "EmptyIfStmt", "ref": "category/apex/errorprone.xml/EmptyIfStmt", "priority": "3", "message": "Avoid empty  statements" }, { "name": "EmptyWhileStmt", "ref": "category/apex/errorprone.xml/EmptyWhileStmt", "priority": "3", "message": "Avoid empty statements" }, { "name": "EmptyTryOrFinallyBlock", "ref": "category/apex/errorprone.xml/EmptyTryOrFinallyBlock", "priority": "3", "message": "Avoid empty try or finally blocks" }, { "name": "EmptyStatementBlock", "ref": "category/apex/errorprone.xml/EmptyStatementBlock", "priority": "3", "message": "Avoid empty block statements." }, { "name": "OneDeclarationPerLine", "ref": "category/apex/codestyle.xml/OneDeclarationPerLine", "priority": "3", "message": "" }, { "name": "ApexDoc", "ref": "category/apex/documentation.xml/ApexDoc", "priority": "3", "message": "Document classes, methods, and properties that are public or global." }]';
		MockHttpResponseGenerator fakeResponse = new MockHttpResponseGenerator(200, 'Complete', res, null);
		Test.setMock(HttpCalloutMock.class, fakeResponse);
		gscars.generateDefaultRuleSet();
		List<Static_Code_Analysis_Rule__c> rules = [SELECT Priority__c FROM Static_Code_Analysis_Rule__c WHERE Static_Code_Analysis_Settings__c = :scas.Id ORDER BY Priority__c];
		System.assertEquals(48, rules.size());
		gscars.goBack();
        gscars.getPageMessageSize();
		Test.stopTest();
	}
}