<apex:component controller="JobsManager" allowDML="true">

    <!--
    In order to lock the screen you will need to reference in the visualforce page the below line:
    <apex:actionStatus id="screenlocker" onstart="lockScreen();" onstop="unlockScreen();" />
    This component requires jquery to be added to the visualforce page as $copado
    -->
    
    <apex:attribute name="msg" description="show lock text" type="String" required="true" />
    <apex:attribute name="useJobsManager" description="Use New jobsmanager event handling" type="Boolean" required="false" />
    <apex:attribute name="possibleRunningJobs" description="List of possible jobs that can be run on a page: matchingKey,jobType,parentId;..." type="String" required="false" />
    <apex:attribute name="lockOnLoad" description="It will be used to lock screen on page load" type="Boolean" required="false" default="false"/>

    <style type="text/css">
        .slds-screenlocker div{
            position: absolute;
            top: 50%;
            left: 50%;
            margin-right: -50%;
            transform: translate(-50%, -50%);
            padding-top: 15px;                  
            padding: 30px;
            background-color: transparent;
            z-index: 9999;
        }
        .lightninglocker{
            position: fixed;
            top: 0;
            left: 0;
            height: 100%;
            width: 100%;
            z-index: 10000;
            background-color: rgba(33,33,33,0.2);
        }
        .lightninglockerMessage{
            font-size: 14pt;
            font-weight: bold;
            position: relative !important;
            left: 50% !important;
            margin-right: -50% !important;
            transform: translate(-50%, -5%) !important;
            padding-top: 0px !important;
            border: none !important;
            padding: 0px !important;
            border-radius: 0px !important;
            background-color: transparent !important;
        }
        #screenLockerLightningFrame {
            text-align: center;
            border: 1px solid black;
            background-color: rgba(255, 255, 255, 0.75);
            border-radius: 10px;
        }
    </style>

    <apex:outputPanel rendered="{!$User.UIThemeDisplayed=='Theme3'}" >
        <c:IncludeStaticsResourceComponent addSLcss="true"/>
        <div id="screenLocker" style="{!IF(lockOnLoad == true,'display:block;','display:none;')}">
            <p>
                <img src="/img/loading.gif"/>  <span id="screenLockerMessage">{!msg}</span>
                <br /><br />
                <a href="#" onclick="unlockScreen(); window.copadoIgnoreLockScreens=true;">{!$Label.HIDE_MESSAGE}</a>
               <span id="statusManager_clearLastStatus" style="display: none;">
                	<br /><br />
                	<a href="#" onclick="if(confirm('{!$Label.STATUS_MANAGER_CONFIRM_RESET}'.replace('{AGE}', statusManager.lastStatusAge))) { statusManager.setStatusComplete(); location.reload(); }">{!$Label.STATUS_MANAGER_CLEAR_STATUS}</a>
                </span>
            </p>
        </div>
    </apex:outputPanel>
    <apex:outputPanel rendered="{!$User.UIThemeDisplayed!='Theme3'}" >
        <div id="screenLocker" class="slds-screenlocker lightninglocker" style="{!IF(lockOnLoad == true,'display:block;','display:none;')}">
            <div id="screenLockerLightningFrame">
                <img style="width: 100px;" src="{!URLFOR($Resource.SLDS,'assets/images/spinners/slds_spinner_brand.gif')}" />
                <p id="screenLockerMessage" class="lightninglockerMessage">{!msg}</p>
                <br />
                <a href="#" onclick="unlockScreen();">{!$Label.HIDE_MESSAGE}</a>
                <span id="statusManager_clearLastStatus" style="display: none;">
                    <br />
                    <a href="#" onclick="if(confirm('{!$Label.STATUS_MANAGER_CONFIRM_RESET}'.replace('{AGE}', statusManager.lastStatusAge))) { statusManager.setStatusComplete(); location.reload(); }">{!$Label.STATUS_MANAGER_CLEAR_STATUS}</a>
                </span>
            </div>
        </div>
    </apex:outputPanel>

    <script>
        function setLockScreenMessage(txt){
            //document.getElementById('screenLockerMessage').text = txt;
            $copado('#screenLockerMessage').text(txt);
            //setTimeout(function(){ $copado('#screenLockerMessage').text(txt); }, 3000);
        }
        function setStatusMessage(txt,elementId){
            //document.getElementById('screenLockerMessage').text = txt;
            $copado('#'+elementId).text(txt);
            //setTimeout(function(){ $copado('#screenLockerMessage').text(txt); }, 3000);
        }
        function lockScreen(){
            document.getElementById('screenLocker').style.display='block';
        }
        function unlockScreen(){
            document.getElementById('screenLocker').style.display='none';
        }
    </script>


    <apex:outputPanel rendered="{!useJobsManager}" layout="none">
        <c:IncludeStaticsResourceComponent addJQuery="true" addCometdjs="true" addJSON2js="true" addJCometdjs="true"/>
        <apex:includeScript value="{!URLFOR($Resource.utilsV2) }"/>
        <apex:includeScript value="{!URLFOR($Resource.copadoStreamingService) }" />
        <script type="text/javascript">
            $copado.cometd = $copado.cometd || $.cometd;
        </script>
        <c:IncludeConnectionJsComponent />

        <apex:actionFunction action="{!jsRunningJobsMatching}" name="jsRunningJobsMatching" reRender="runningJobs">
            <apex:param name="possibleRunningJobs" assignTo="{!possibleRunningJobs}" value="" />
        </apex:actionFunction>

        <apex:actionFunction action="{!jsCreateRunningJob}" name="jsCreateRunningJob" reRender="runningJobs,startPolling" oncomplete="window.copadoIgnoreLockScreens=false;">
            <apex:param name="matchingKey" assignTo="{!matchingKey}" value="" />
            <apex:param name="apiType" assignTo="{!apiType}" value="" />
            <apex:param name="parentId" assignTo="{!parentId}" value="" />
            <apex:param name="status" assignTo="{!status}" value="" />
        </apex:actionFunction>

        <apex:actionFunction action="{!jsRunningJobsMatching}" name="jsCreateRunningJobPoll" reRender="runningJobs,startPolling">
        </apex:actionFunction>

        <apex:actionPoller action="{!jsRunningJobsMatching}" id="startPolling" reRender="runningJobs" interval="30"
            enabled="{! !isBlank(latestRunningJobsMatching)}" onsubmit="return jsRunningJobsMatchingAllowPolling();"/>

        <script>
            var jsRunningJobsMatchingLastUpdate = (new Date).getTime();
            // Prevent polling if there was an event in the last minute.
            function jsRunningJobsMatchingAllowPolling() {
                return ((new Date).getTime() - jsRunningJobsMatchingLastUpdate) >= 60000;
            }

            function jsRunningJobsMatchingProcess(notification, now) {
                console.debug("jsRunningJobsMatchingProcess()", notification, now);
                if(notification) {
                    console.debug("jsRunningJobsMatchingProcess()", notification.isFinished, notification.status, notification);
                    if(window.copadoIgnoreLockScreens)
                        return; // the hide link should keep the thing hidden.
                    if(notification.isFinished) {
                        window.dispatchEvent(new CustomEvent('copadoJobsManagerFinished', { detail: [notification] }));
                        unlockScreen();
                        return;
                    }
                    // datetime operations are sensitive, so it's safer to ignore any error.
                    var d = 'moment';
                    try{
                        d = notification.lastModified? (Date.parse(now) - Date.parse(notification.lastModified))/1000 : 0;
                        d = (d>=60) ?""+Math.floor(d/60)+"min" :"~"+d+"s";
                    }catch(e) {
                        console.warn(e);
                    }
                    setLockScreenMessage(''+notification.status+' ('+d+' ago)');
                    lockScreen();
                }/*else{  it seems to unlock too fast. it was unlocking before the job is finished
                    unlockScreen(); // Just a fallback... unlock the screen upon every page load.
                }*/
            }
        </script>

        <apex:outputPanel id="runningJobs">
            <script>
                window.setTimeout(jsRunningJobsMatchingProcess, 1, {!jsLatestRunningJobsMatching}, '{!NOW()}' );
            </script>
        </apex:outputPanel>

        <script>
            $copado(function() {
                copadoStreamingService.ns = '{!JSENCODE(namespace)}';
                copadoStreamingService.init();
                console.info('JobsManager() initialiseStreamingApi {!JSENCODE(possibleRunningJobs)}');
                jsRunningJobsMatching('{!JSENCODE(possibleRunningJobs)}');

                $copado.cometd.subscribe('/topic/CopadoNotifications', function(message) {
                    // NR: added the setTimeout to detatch execution, otherwise exceptions will be ignored.
                    window.setTimeout(function() {
                        if(!message || !message.data || !message.data.sobject) {
                            return console.warn('JobsManager() incorrect message=', message);
                        }
                        jsRunningJobsMatchingLastUpdate = (new Date).getTime();
                        // this event could be fired for any job anywhere, so, we actually go to apex to check
                        jsRunningJobsMatching('{!JSENCODE(possibleRunningJobs)}');
                    },1);
                });
            });
        </script>

    </apex:outputPanel>


</apex:component>